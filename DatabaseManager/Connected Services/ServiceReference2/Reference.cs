//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference2
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/ScadaCore.Tags.Model")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceReference2.InputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceReference2.AnalogInputTag))]
    public partial class Tag : object
    {
        
        private string DescriptionField;
        
        private string IOAddressField;
        
        private string IdField;
        
        private double ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IOAddress
        {
            get
            {
                return this.IOAddressField;
            }
            set
            {
                this.IOAddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InputTag", Namespace="http://schemas.datacontract.org/2004/07/ScadaCore.Tags.Model")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceReference2.AnalogInputTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceReference2.Alarm[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceReference2.Alarm))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceReference2.Tag[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceReference2.Tag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceReference2.AnalogInputTag[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceReference2.Unit))]
    public partial class InputTag : ServiceReference2.Tag
    {
        
        private object DriverField;
        
        private bool IsScanOnField;
        
        private int ScanTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Driver
        {
            get
            {
                return this.DriverField;
            }
            set
            {
                this.DriverField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsScanOn
        {
            get
            {
                return this.IsScanOnField;
            }
            set
            {
                this.IsScanOnField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScanTime
        {
            get
            {
                return this.ScanTimeField;
            }
            set
            {
                this.ScanTimeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalogInputTag", Namespace="http://schemas.datacontract.org/2004/07/ScadaCore.Tags.Model")]
    public partial class AnalogInputTag : ServiceReference2.InputTag
    {
        
        private double HighLimitField;
        
        private double LowLimitField;
        
        private ServiceReference2.Unit UnitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighLimit
        {
            get
            {
                return this.HighLimitField;
            }
            set
            {
                this.HighLimitField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowLimit
        {
            get
            {
                return this.LowLimitField;
            }
            set
            {
                this.LowLimitField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference2.Unit Unit
        {
            get
            {
                return this.UnitField;
            }
            set
            {
                this.UnitField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Alarm", Namespace="http://schemas.datacontract.org/2004/07/ScadaCore")]
    public partial class Alarm : object
    {
        
        private System.DateTime ActivationTimeField;
        
        private int PriorityField;
        
        private string TagNameField;
        
        private double ThresholdField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ActivationTime
        {
            get
            {
                return this.ActivationTimeField;
            }
            set
            {
                this.ActivationTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority
        {
            get
            {
                return this.PriorityField;
            }
            set
            {
                this.PriorityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName
        {
            get
            {
                return this.TagNameField;
            }
            set
            {
                this.TagNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Threshold
        {
            get
            {
                return this.ThresholdField;
            }
            set
            {
                this.ThresholdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Unit", Namespace="http://schemas.datacontract.org/2004/07/ScadaCore.Tags.Model")]
    public enum Unit : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Kg = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ms = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        C = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        F = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.ITagService")]
    public interface ITagService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddAITag", ReplyAction="http://tempuri.org/ITagService/AddAITagResponse")]
        System.Threading.Tasks.Task<string> AddAITagAsync(string tagId, string description, string ioAddress, double value, int scanTime, bool isScanOn, double lowLimit, double highLimit, string unit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddAOTag", ReplyAction="http://tempuri.org/ITagService/AddAOTagResponse")]
        System.Threading.Tasks.Task<string> AddAOTagAsync(string tagId, string description, string ioAddress, double value, double initialValue, double lowLimit, double highLimit, string unit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddDITag", ReplyAction="http://tempuri.org/ITagService/AddDITagResponse")]
        System.Threading.Tasks.Task<string> AddDITagAsync(string tagId, string description, string ioAddress, double value, int scanTime, bool isScanOn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddDOTag", ReplyAction="http://tempuri.org/ITagService/AddDOTagResponse")]
        System.Threading.Tasks.Task<string> AddDOTagAsync(string tagId, string description, string ioAddress, double value, double initialValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/RemoveTag", ReplyAction="http://tempuri.org/ITagService/RemoveTagResponse")]
        System.Threading.Tasks.Task<string> RemoveTagAsync(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/EnableScan", ReplyAction="http://tempuri.org/ITagService/EnableScanResponse")]
        System.Threading.Tasks.Task<string> EnableScanAsync(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/DisableScan", ReplyAction="http://tempuri.org/ITagService/DisableScanResponse")]
        System.Threading.Tasks.Task<string> DisableScanAsync(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/SetOutputValue", ReplyAction="http://tempuri.org/ITagService/SetOutputValueResponse")]
        System.Threading.Tasks.Task<string> SetOutputValueAsync(string tagId, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllTags", ReplyAction="http://tempuri.org/ITagService/GetAllTagsResponse")]
        System.Threading.Tasks.Task<ServiceReference2.Tag[]> GetAllTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAnalogInputTags", ReplyAction="http://tempuri.org/ITagService/GetAnalogInputTagsResponse")]
        System.Threading.Tasks.Task<ServiceReference2.AnalogInputTag[]> GetAnalogInputTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddAlarm", ReplyAction="http://tempuri.org/ITagService/AddAlarmResponse")]
        System.Threading.Tasks.Task<string> AddAlarmAsync(string tagName, string type, int priority, double threshold);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/RemoveAlarm", ReplyAction="http://tempuri.org/ITagService/RemoveAlarmResponse")]
        System.Threading.Tasks.Task<string> RemoveAlarmAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAlarms", ReplyAction="http://tempuri.org/ITagService/GetAlarmsResponse")]
        System.Threading.Tasks.Task<ServiceReference2.Alarm[]> GetAlarmsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface ITagServiceChannel : ServiceReference2.ITagService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class TagServiceClient : System.ServiceModel.ClientBase<ServiceReference2.ITagService>, ServiceReference2.ITagService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TagServiceClient() : 
                base(TagServiceClient.GetDefaultBinding(), TagServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ITagService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TagServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(TagServiceClient.GetBindingForEndpoint(endpointConfiguration), TagServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TagServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TagServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TagServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TagServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TagServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> AddAITagAsync(string tagId, string description, string ioAddress, double value, int scanTime, bool isScanOn, double lowLimit, double highLimit, string unit)
        {
            return base.Channel.AddAITagAsync(tagId, description, ioAddress, value, scanTime, isScanOn, lowLimit, highLimit, unit);
        }
        
        public System.Threading.Tasks.Task<string> AddAOTagAsync(string tagId, string description, string ioAddress, double value, double initialValue, double lowLimit, double highLimit, string unit)
        {
            return base.Channel.AddAOTagAsync(tagId, description, ioAddress, value, initialValue, lowLimit, highLimit, unit);
        }
        
        public System.Threading.Tasks.Task<string> AddDITagAsync(string tagId, string description, string ioAddress, double value, int scanTime, bool isScanOn)
        {
            return base.Channel.AddDITagAsync(tagId, description, ioAddress, value, scanTime, isScanOn);
        }
        
        public System.Threading.Tasks.Task<string> AddDOTagAsync(string tagId, string description, string ioAddress, double value, double initialValue)
        {
            return base.Channel.AddDOTagAsync(tagId, description, ioAddress, value, initialValue);
        }
        
        public System.Threading.Tasks.Task<string> RemoveTagAsync(string tagId)
        {
            return base.Channel.RemoveTagAsync(tagId);
        }
        
        public System.Threading.Tasks.Task<string> EnableScanAsync(string tagId)
        {
            return base.Channel.EnableScanAsync(tagId);
        }
        
        public System.Threading.Tasks.Task<string> DisableScanAsync(string tagId)
        {
            return base.Channel.DisableScanAsync(tagId);
        }
        
        public System.Threading.Tasks.Task<string> SetOutputValueAsync(string tagId, double value)
        {
            return base.Channel.SetOutputValueAsync(tagId, value);
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.Tag[]> GetAllTagsAsync()
        {
            return base.Channel.GetAllTagsAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.AnalogInputTag[]> GetAnalogInputTagsAsync()
        {
            return base.Channel.GetAnalogInputTagsAsync();
        }
        
        public System.Threading.Tasks.Task<string> AddAlarmAsync(string tagName, string type, int priority, double threshold)
        {
            return base.Channel.AddAlarmAsync(tagName, type, priority, threshold);
        }
        
        public System.Threading.Tasks.Task<string> RemoveAlarmAsync(string tagName)
        {
            return base.Channel.RemoveAlarmAsync(tagName);
        }
        
        public System.Threading.Tasks.Task<ServiceReference2.Alarm[]> GetAlarmsAsync()
        {
            return base.Channel.GetAlarmsAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITagService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITagService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:64310/DatabaseManagementService/TagService.svc/Tag");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return TagServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ITagService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return TagServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ITagService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ITagService,
        }
    }
}
