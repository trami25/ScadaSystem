//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RTUnitTemp.RTUnitServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RTUnit", Namespace="http://schemas.datacontract.org/2004/07/ScadaCore")]
    [System.SerializableAttribute()]
    public partial class RTUnit : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowerLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UpperLimitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowerLimit {
            get {
                return this.LowerLimitField;
            }
            set {
                if ((this.LowerLimitField.Equals(value) != true)) {
                    this.LowerLimitField = value;
                    this.RaisePropertyChanged("LowerLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double UpperLimit {
            get {
                return this.UpperLimitField;
            }
            set {
                if ((this.UpperLimitField.Equals(value) != true)) {
                    this.UpperLimitField = value;
                    this.RaisePropertyChanged("UpperLimit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RTUnitServiceReference.IRTUnitService")]
    public interface IRTUnitService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTUnitService/AddUnit", ReplyAction="http://tempuri.org/IRTUnitService/AddUnitResponse")]
        void AddUnit(RTUnitTemp.RTUnitServiceReference.RTUnit unit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTUnitService/AddUnit", ReplyAction="http://tempuri.org/IRTUnitService/AddUnitResponse")]
        System.Threading.Tasks.Task AddUnitAsync(RTUnitTemp.RTUnitServiceReference.RTUnit unit);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRTUnitService/WriteValue")]
        void WriteValue(string address, double value, byte[] signature, System.Security.Cryptography.RSAParameters publicKey);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRTUnitService/WriteValue")]
        System.Threading.Tasks.Task WriteValueAsync(string address, double value, byte[] signature, System.Security.Cryptography.RSAParameters publicKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRTUnitServiceChannel : RTUnitTemp.RTUnitServiceReference.IRTUnitService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RTUnitServiceClient : System.ServiceModel.ClientBase<RTUnitTemp.RTUnitServiceReference.IRTUnitService>, RTUnitTemp.RTUnitServiceReference.IRTUnitService {
        
        public RTUnitServiceClient() {
        }
        
        public RTUnitServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RTUnitServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RTUnitServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RTUnitServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddUnit(RTUnitTemp.RTUnitServiceReference.RTUnit unit) {
            base.Channel.AddUnit(unit);
        }
        
        public System.Threading.Tasks.Task AddUnitAsync(RTUnitTemp.RTUnitServiceReference.RTUnit unit) {
            return base.Channel.AddUnitAsync(unit);
        }
        
        public void WriteValue(string address, double value, byte[] signature, System.Security.Cryptography.RSAParameters publicKey) {
            base.Channel.WriteValue(address, value, signature, publicKey);
        }
        
        public System.Threading.Tasks.Task WriteValueAsync(string address, double value, byte[] signature, System.Security.Cryptography.RSAParameters publicKey) {
            return base.Channel.WriteValueAsync(address, value, signature, publicKey);
        }
    }
}
