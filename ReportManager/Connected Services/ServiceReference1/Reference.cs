//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReportManager.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Alarm", Namespace="http://schemas.datacontract.org/2004/07/ScadaCore")]
    [System.SerializableAttribute()]
    public partial class Alarm : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ActivationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ThresholdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ActivationTime {
            get {
                return this.ActivationTimeField;
            }
            set {
                if ((this.ActivationTimeField.Equals(value) != true)) {
                    this.ActivationTimeField = value;
                    this.RaisePropertyChanged("ActivationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Threshold {
            get {
                return this.ThresholdField;
            }
            set {
                if ((this.ThresholdField.Equals(value) != true)) {
                    this.ThresholdField = value;
                    this.RaisePropertyChanged("Threshold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagValue", Namespace="http://schemas.datacontract.org/2004/07/ScadaCore.Tags.Model")]
    [System.SerializableAttribute()]
    public partial class TagValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagId {
            get {
                return this.TagIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TagIdField, value) != true)) {
                    this.TagIdField = value;
                    this.RaisePropertyChanged("TagId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IReportService")]
    public interface IReportService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/DoWork", ReplyAction="http://tempuri.org/IReportService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/DoWork", ReplyAction="http://tempuri.org/IReportService/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAllAlarms", ReplyAction="http://tempuri.org/IReportService/GetAllAlarmsResponse")]
        ReportManager.ServiceReference1.Alarm[] GetAllAlarms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAllAlarms", ReplyAction="http://tempuri.org/IReportService/GetAllAlarmsResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference1.Alarm[]> GetAllAlarmsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAllAlarmsInTimePeriod", ReplyAction="http://tempuri.org/IReportService/GetAllAlarmsInTimePeriodResponse")]
        ReportManager.ServiceReference1.Alarm[] GetAllAlarmsInTimePeriod(System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAllAlarmsInTimePeriod", ReplyAction="http://tempuri.org/IReportService/GetAllAlarmsInTimePeriodResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference1.Alarm[]> GetAllAlarmsInTimePeriodAsync(System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAlarmsWithPriority", ReplyAction="http://tempuri.org/IReportService/GetAlarmsWithPriorityResponse")]
        ReportManager.ServiceReference1.Alarm[] GetAlarmsWithPriority(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAlarmsWithPriority", ReplyAction="http://tempuri.org/IReportService/GetAlarmsWithPriorityResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference1.Alarm[]> GetAlarmsWithPriorityAsync(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAllTagValues", ReplyAction="http://tempuri.org/IReportService/GetAllTagValuesResponse")]
        ReportManager.ServiceReference1.TagValue[] GetAllTagValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAllTagValues", ReplyAction="http://tempuri.org/IReportService/GetAllTagValuesResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference1.TagValue[]> GetAllTagValuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAllTagValuesInTimePeriod", ReplyAction="http://tempuri.org/IReportService/GetAllTagValuesInTimePeriodResponse")]
        ReportManager.ServiceReference1.TagValue[] GetAllTagValuesInTimePeriod(System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAllTagValuesInTimePeriod", ReplyAction="http://tempuri.org/IReportService/GetAllTagValuesInTimePeriodResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference1.TagValue[]> GetAllTagValuesInTimePeriodAsync(System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetLatestAITagsValues", ReplyAction="http://tempuri.org/IReportService/GetLatestAITagsValuesResponse")]
        ReportManager.ServiceReference1.TagValue[] GetLatestAITagsValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetLatestAITagsValues", ReplyAction="http://tempuri.org/IReportService/GetLatestAITagsValuesResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference1.TagValue[]> GetLatestAITagsValuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetLatestDITagsValues", ReplyAction="http://tempuri.org/IReportService/GetLatestDITagsValuesResponse")]
        ReportManager.ServiceReference1.TagValue[] GetLatestDITagsValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetLatestDITagsValues", ReplyAction="http://tempuri.org/IReportService/GetLatestDITagsValuesResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference1.TagValue[]> GetLatestDITagsValuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetLatestValueAmongAllAITags", ReplyAction="http://tempuri.org/IReportService/GetLatestValueAmongAllAITagsResponse")]
        ReportManager.ServiceReference1.TagValue GetLatestValueAmongAllAITags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetLatestValueAmongAllAITags", ReplyAction="http://tempuri.org/IReportService/GetLatestValueAmongAllAITagsResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference1.TagValue> GetLatestValueAmongAllAITagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetLatestValueAmongAllDITags", ReplyAction="http://tempuri.org/IReportService/GetLatestValueAmongAllDITagsResponse")]
        ReportManager.ServiceReference1.TagValue GetLatestValueAmongAllDITags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetLatestValueAmongAllDITags", ReplyAction="http://tempuri.org/IReportService/GetLatestValueAmongAllDITagsResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference1.TagValue> GetLatestValueAmongAllDITagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAllValuesForTag", ReplyAction="http://tempuri.org/IReportService/GetAllValuesForTagResponse")]
        ReportManager.ServiceReference1.TagValue[] GetAllValuesForTag(string tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAllValuesForTag", ReplyAction="http://tempuri.org/IReportService/GetAllValuesForTagResponse")]
        System.Threading.Tasks.Task<ReportManager.ServiceReference1.TagValue[]> GetAllValuesForTagAsync(string tagId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportServiceChannel : ReportManager.ServiceReference1.IReportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportServiceClient : System.ServiceModel.ClientBase<ReportManager.ServiceReference1.IReportService>, ReportManager.ServiceReference1.IReportService {
        
        public ReportServiceClient() {
        }
        
        public ReportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public ReportManager.ServiceReference1.Alarm[] GetAllAlarms() {
            return base.Channel.GetAllAlarms();
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference1.Alarm[]> GetAllAlarmsAsync() {
            return base.Channel.GetAllAlarmsAsync();
        }
        
        public ReportManager.ServiceReference1.Alarm[] GetAllAlarmsInTimePeriod(System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.GetAllAlarmsInTimePeriod(startTime, endTime);
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference1.Alarm[]> GetAllAlarmsInTimePeriodAsync(System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.GetAllAlarmsInTimePeriodAsync(startTime, endTime);
        }
        
        public ReportManager.ServiceReference1.Alarm[] GetAlarmsWithPriority(int priority) {
            return base.Channel.GetAlarmsWithPriority(priority);
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference1.Alarm[]> GetAlarmsWithPriorityAsync(int priority) {
            return base.Channel.GetAlarmsWithPriorityAsync(priority);
        }
        
        public ReportManager.ServiceReference1.TagValue[] GetAllTagValues() {
            return base.Channel.GetAllTagValues();
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference1.TagValue[]> GetAllTagValuesAsync() {
            return base.Channel.GetAllTagValuesAsync();
        }
        
        public ReportManager.ServiceReference1.TagValue[] GetAllTagValuesInTimePeriod(System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.GetAllTagValuesInTimePeriod(startTime, endTime);
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference1.TagValue[]> GetAllTagValuesInTimePeriodAsync(System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.GetAllTagValuesInTimePeriodAsync(startTime, endTime);
        }
        
        public ReportManager.ServiceReference1.TagValue[] GetLatestAITagsValues() {
            return base.Channel.GetLatestAITagsValues();
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference1.TagValue[]> GetLatestAITagsValuesAsync() {
            return base.Channel.GetLatestAITagsValuesAsync();
        }
        
        public ReportManager.ServiceReference1.TagValue[] GetLatestDITagsValues() {
            return base.Channel.GetLatestDITagsValues();
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference1.TagValue[]> GetLatestDITagsValuesAsync() {
            return base.Channel.GetLatestDITagsValuesAsync();
        }
        
        public ReportManager.ServiceReference1.TagValue GetLatestValueAmongAllAITags() {
            return base.Channel.GetLatestValueAmongAllAITags();
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference1.TagValue> GetLatestValueAmongAllAITagsAsync() {
            return base.Channel.GetLatestValueAmongAllAITagsAsync();
        }
        
        public ReportManager.ServiceReference1.TagValue GetLatestValueAmongAllDITags() {
            return base.Channel.GetLatestValueAmongAllDITags();
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference1.TagValue> GetLatestValueAmongAllDITagsAsync() {
            return base.Channel.GetLatestValueAmongAllDITagsAsync();
        }
        
        public ReportManager.ServiceReference1.TagValue[] GetAllValuesForTag(string tagId) {
            return base.Channel.GetAllValuesForTag(tagId);
        }
        
        public System.Threading.Tasks.Task<ReportManager.ServiceReference1.TagValue[]> GetAllValuesForTagAsync(string tagId) {
            return base.Channel.GetAllValuesForTagAsync(tagId);
        }
    }
}
